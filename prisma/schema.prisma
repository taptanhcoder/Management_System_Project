// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?       // ← Thêm
  image         String?         // ← Thêm
  passwordHash  String           // ← Cần giữ nguyên
  name          String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  prescriptions Prescription[]
  invoices      Invoice[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  drugs       Drug[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Drug {
  id                 String             @id @default(cuid())
  name               String
  category           Category           @relation(fields: [categoryId], references: [id])
  categoryId         String
  quantity           Int
  expiryDate         DateTime
  supplier           String
  purchasePrice      Float
  sellingPrice       Float
  description        String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  invoiceItems       InvoiceItem[]
  prescriptionItems  PrescriptionItem[]
}

model Prescription {
  id            String               @id @default(cuid())
  customer      String
  date          DateTime
  status        PrescriptionStatus  @default(PENDING)
  total         Float
  createdBy     User?               @relation(fields: [createdById], references: [id])
  createdById   String?
  items         PrescriptionItem[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

enum PrescriptionStatus {
  PENDING
  CONFIRMED
}

model PrescriptionItem {
  id             String        @id @default(cuid())
  prescription   Prescription  @relation(fields: [prescriptionId], references: [id])
  prescriptionId String
  drug           Drug          @relation(fields: [drugId], references: [id])
  drugId         String
  quantity       Int
  unitPrice      Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  phone       String
  email       String    @unique
  address     String
  notes       String?
  invoices    Invoice[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id           String         @id @default(cuid())
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   String
  date         DateTime
  status       InvoiceStatus  @default(UNPAID)
  items        InvoiceItem[]
  total        Float
  createdBy    User?          @relation(fields: [createdById], references: [id])
  createdById  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum InvoiceStatus {
  PAID
  UNPAID
}

model InvoiceItem {
  id         String    @id @default(cuid())
  invoice    Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  drug       Drug      @relation(fields: [drugId], references: [id])
  drugId     String
  quantity   Int
  unitPrice  Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
